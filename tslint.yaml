# TSLint rules
# https://palantir.github.io/tslint/rules/

defaultSeverity: error
extends:
  # TSLint recommended rules
  # https://github.com/palantir/tslint/blob/master/src/configs/recommended.ts
  - tslint:recommended

  # TSLint config for Airbnb JavaScript Style Guide
  # https://github.com/progre/tslint-config-airbnb/blob/master/tslint.js
  - tslint-config-airbnb

  # Note that tslint-config-airbnb includes following external rules.
  # - tslint-consistent-codestyle
  #     https://github.com/ajafff/tslint-consistent-codestyle
  # - tslint-eslint-rules
  #     https://github.com/buzinas/tslint-eslint-rules
  # - tslint-microsoft-contrib
  #     https://github.com/Microsoft/tslint-microsoft-contrib

  # Lint rules related to React & JSX for TSLint
  # https://github.com/palantir/tslint-react
  - tslint-react

  # Disable specific TSLint rules to avoid conflict with Prettier functions.
  # If you find some problems, following command shows conflicting rules and helps you to solve them.
  # $ yarn run tslint-config-prettier-check ./tslint.yaml
  - tslint-config-prettier

rulesDirectory:
  # Format with prettier before running TSLint automatically.
  - tslint-plugin-prettier

# Override my kind of rules.
# Note that comment-outed rules are classified into formating code and Prettier handles.
rules:
  prettier: true

  ### tslint-react ###
  jsx-no-lambda: false
  jsx-boolean-value: false

  ### tslint-config-airbnb ###
  object-shorthand-properties-first: false
  import-name: false

  ### TypeScript specific ###
  adjacent-overload-signatures: false
  ban-ts-ignore: true
  ban-types: false
  member-access: false
  member-ordering:
    options:
      order:
        - static-field
        - instance-field
        - static-method
        - instance-method

  no-any: false
  no-empty-interface: false
  no-import-side-effect: false
  no-inferrable-types: false
  no-internal-module: true
  no-magic-numbers: false
  no-namespace: false
  no-non-null-assertion: false
  no-parameter-reassignment: true
  no-reference: true
  no-unnecessary-type-assertion: true
  no-var-requires: true
  only-arrow-functions:
    options:
      - allow-declarations
      - allow-named-functions

  prefer-for-of: true
  promise-function-async: false
  typedef:
    options:
      # - call-signature
      # - arrow-call-signature
      - parameter
      - arrow-parameter
      - property-declaration
      # - variable-declaration
      - member-variable-declaration
      # - object-destructuring
      # - array-destructuring
  # typedef-whitespace:
  #   options:
  #     - call-signature: nospace
  #       index-signature: nospace
  #       parameter: nospace
  #       property-declaration: nospace
  #       variable-declaration: nospace
  #     - call-signature: nospace
  #       index-signature: nospace
  #       parameter: nospace
  #       property-declaration: nospace
  #       variable-declaration: nospace

  no-else-after-return: false

  ### Functionality ###
  no-for-in-array: true
  curly: true
  no-conditional-assignment: true
  no-console: false
  no-duplicate-super: true
  no-duplicate-switch-case: true
  no-duplicate-variable: true
  no-dynamic-delete: true
  no-empty: true
  no-eval: true
  no-implicit-dependencies: false
  no-invalid-template-strings: true
  no-invalid-this: true
  no-misused-new: true
  no-return-await: false
  no-shadowed-variable: true
  no-sparse-arrays: true
  no-string-literal: false
  no-string-throw: true
  no-submodule-imports: false
  no-switch-case-fall-through: true
  no-this-assignment: true
  no-unbound-method: false
  no-unnecessary-class: true

  # NOTE: Disabled no-unsafe-any because imported CSS modules have no type.
  no-unsafe-any: false
  no-unsafe-finally: true
  no-unused-expression:
    options:
      - allow-fast-null-checks
      - allow-new

  no-use-before-declare: true
  no-var-keyword: true
  no-void-expression: false
  prefer-conditional-expression: true
  prefer-object-spread: false
  radix: true
  restrict-plus-operands: true
  strict-boolean-expressions: false
  strict-type-predicates: true
  switch-default: true
  triple-equals: true
  unnecessary-constructor: true
  use-default-type-parameter: false
  use-isnan: true

  ### Maintainability ###
  deprecation:
    severity: warn
  # eofline: true
  # indent:
  #   options:
  #     - spaces
  #     - 2

  # linebreak-style:
  #   options:
  #     - LF

  max-classes-per-file: false
  max-file-line-count: false
  # max-line-length:
  #   options:
  #     - 130

  no-default-export: false
  no-default-import: false
  no-duplicate-imports: false
  no-mergeable-namespace: true
  no-require-imports: true
  object-literal-sort-keys: false
  prefer-const: true
  prefer-readonly: true
  # trailing-comma:
  #   options:
  #     multiline: always
  #     singleline: never

  ### Style ###
  align: false
  arrows-parent: false
  arrow-return-shorthand: true
  binary-expression-operand-order: true
  class-name: true
  encoding: true
  # import-spacing: true
  interface-name:
    options: never-prefix

  interface-over-type-literal: false
  jsdoc-format: false
  match-default-export-name: false
  newline-before-return: false
  new-parens: false
  no-angle-bracket-type-assertion: false
  no-boolean-literal-compare: true
  # no-consecutive-blank-lines: true
  # no-irregular-whitespace: true
  no-parameter-properties: true
  no-redundant-jsdoc: true
  # no-trailing-whitespace: true
  no-unnecessary-callback-wrapper: true
  no-unnecessary-initializer: true
  no-unnecessary-qualifier: true
  # number-literal-format: true
  # object-literal-key-quotes:
  #   options:
  #     - as-needed

  object-literal-shorthand: true
  # one-line:
  #   options:
  #     - check-catch
  #     - check-finally
  #     - check-else
  #     - check-open-brace
  #     - check-whitespace

  one-variable-per-declaration: true
  ordered-imports: true
  prefer-function-over-method: false
  prefer-method-signature: false
  prefer-switch: true
  prefer-template: true
  prefer-while: true
  # quotemark:
  #   options:
  #     - single
  #     - jsx-double

  return-undefined: true
  # semicolon:
  #   options:
  #     - never

  space-before-function-paren: false
  space-within-parens: false
  switch-final-break: false
  type-literal-delimiter: true
  unnecessary-bind: false
  variable-name:
    options:
      - ban-keywords

  # whitespace: true

# FIXME: Can I extend the rules of TSLint ?
jsRules:
  object-literal-sort-keys: false
